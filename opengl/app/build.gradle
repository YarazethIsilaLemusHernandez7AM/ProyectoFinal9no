apply plugin: 'com.android.application'
import org.apache.tools.ant.taskdefs.condition.Os;

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.example.yara.opengl"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        ndk{
            moduleName "opengl"
            ldLibs "log","android"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main.jni.srcDirs=[]//disable automatic ndk-build call
    sourceSets.main.jniLibs.srcDir'src/main/Libs'

    //call regular ndk-build(.cmd) script drom app directory
    task ndkBuild(type:Exec){
        workingDir file('src/main')
        commandLine getNdkBuildCmd()

    }
    tasks.withType(JavaCompile){
        compileTask-> compileTask.dependsOn ndkBuild
    }
    task cleanNative(type: Exec){
        workingDir file('src/main')
        commandLine getNdkBuildCmd(),'clean'
    }
    clean.dependsOn cleanNative
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
def getNdkDir(){
    if(System.env.ANDROID_NDK_ROOT!=null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties= new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir=properties.getProperty('ndk.dir',null)
    if(ndkdir==null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with and ANDROID_NDK_ROOT environment variable.")
    return ndkdir
}
def getNdkBuildCmd(){
    def ndkbuild=getNdkDir()+"/ndk-build"
    if(Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild+=".cmd"
    return ndkbuild
}